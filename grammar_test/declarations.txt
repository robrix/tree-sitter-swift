======
import
======

import Foo
import Foo.Bar
import typealias Foo.Bar.Quux

---

(program
	(import_declaration (identifier))
	(import_declaration (identifier) (identifier))
	(import_declaration (identifier) (identifier) (identifier)))

======
constant
======

let foo
let foo = bar
let foo, bar = foo
let foo, bar = foo, quux: Int = baz

---

(program
	(constant_declaration (identifier))
	(constant_declaration (assignment_expression (identifier) (identifier)))
	(constant_declaration (identifier) (assignment_expression (identifier) (identifier)))
	(constant_declaration (identifier) (assignment_expression (identifier) (identifier)) (pattern_initializer (identifier) (type (identifier)) (identifier))))

======
variable
======

var foo
var foo = bar
var foo: Int { get }
var foo: Int { get set }
var foo: Int { set get }
var foo, bar = foo
var foo, bar = foo, quux: Int = baz

---

(program
	(variable_declaration (identifier))
	(variable_declaration (assignment_expression (identifier) (identifier)))
	(variable_declaration (identifier) (type (identifier)))
	(variable_declaration (identifier) (type (identifier)))
	(variable_declaration (identifier) (type (identifier)))
	(variable_declaration (identifier) (assignment_expression (identifier) (identifier)))
	(variable_declaration (identifier) (assignment_expression (identifier) (identifier)) (pattern_initializer (identifier) (type (identifier)) (identifier))))

======
variable assignment with trailing closure
======

var a: Int = b {}

---

(program
	(variable_declaration (pattern_initializer (identifier) (type (identifier)) (function_call_expression (identifier) (closure_expression)))))

======
typealias
======

typealias Foo = Int

---

(program
	(typealias_declaration (identifier) (type (identifier))))

======
function
======

func foo() {}
func > () {}
func foo() -> Int {}
func foo(_: Int) {}
func foo(x: Int) {}
func foo(_ x: Int) {}
func foo(x x: Int) {}
func foo(x: Int, y: Int) {}
func foo(x: Int, y: Int)() {}
func foo(x: Int, y: Int)(x: Int, y: Int) {}

---

(program
	(function_declaration (identifier) (statement_block))
	(function_declaration (operator) (statement_block))
	(function_declaration (identifier) (type (identifier)) (statement_block))
	(function_declaration (identifier) (type (identifier)) (statement_block))
	(function_declaration (identifier) (identifier) (type (identifier)) (statement_block))
	(function_declaration (identifier) (identifier) (type (identifier)) (statement_block))
	(function_declaration (identifier) (identifier) (identifier) (type (identifier)) (statement_block))
	(function_declaration (identifier) (identifier) (type (identifier)) (identifier) (type (identifier)) (statement_block))
	(function_declaration (identifier) (identifier) (type (identifier)) (identifier) (type (identifier)) (statement_block))
	(function_declaration (identifier) (identifier) (type (identifier)) (identifier) (type (identifier)) (identifier) (type (identifier)) (identifier) (type (identifier)) (statement_block)))

======
enum
======

enum A {}
enum A {
	case A
}
enum A {
	case A(Int)
}
enum A {
	case A = ""
}

---

(program
	(enum_declaration (identifier) (declaration_block))
	(enum_declaration (identifier) (declaration_block (case_declaration (identifier))))
	(enum_declaration (identifier) (declaration_block (case_declaration (identifier) (tuple_type (type (identifier))))))
	(enum_declaration (identifier) (declaration_block (case_declaration (identifier) (static_string_literal)))))

======
struct
======

struct A {}

---

(program
	(struct_declaration (identifier) (declaration_block)))

======
class
======

class A {}

---

(program
	(class_declaration (identifier) (declaration_block)))


======
protocol
======

protocol A {}
protocol A {
	var a: Int { get }
	func f()
	init()
	init?()
	init!()
	subscript(_: ()) -> Int { get }
	typealias A
	typealias B = C
}

---

(program
	(protocol_declaration (identifier))
	(protocol_declaration (identifier)
		(protocol_variable_declaration (identifier) (type (identifier)))
		(protocol_method_declaration (identifier))
		(protocol_initializer_declaration)
		(protocol_initializer_declaration)
		(protocol_initializer_declaration)
		(protocol_subscript_declaration (type (tuple_type)) (type (identifier)))
		(protocol_associated_type_declaration (identifier))
		(protocol_associated_type_declaration (identifier) (type (identifier)))))

======
initializer
======

struct S {
	init() {}
}

---

(program
	(struct_declaration (identifier) (declaration_block
		(initializer_declaration (statement_block)))))

======
deinitializer
======

class C {
	deinit {}
}

---

(program
	(class_declaration (identifier) (declaration_block
		(deinitializer_declaration (statement_block)))))

======
extension
======

extension A {
	func f() {}
}

---

(program
	(extension_declaration (identifier) (declaration_block
		(function_declaration (identifier) (statement_block)))))

======
subscript
======

struct A {
	subscript(_: B) -> C {}
}

---

(program
	(struct_declaration (identifier) (declaration_block
		(subscript_declaration (type (identifier)) (type (identifier)) (statement_block)))))

======
operator
======

prefix operator < {}
postfix operator > {}
infix operator <> {}
infix operator <> {
	precedence 0
}
infix operator <> {
	precedence 10
}
infix operator <> {
	precedence 99
}
infix operator <> {
	precedence 199
}
infix operator <> {
	precedence 249
}
infix operator <> {
	precedence 255
}
infix operator <> {
	associativity left
}
infix operator <> {
	precedence 0
	associativity right
}
infix operator <> {
	associativity none
	precedence 9
}

---

(program
	(operator_declaration (operator))
	(operator_declaration (operator))
	(operator_declaration (operator))
	(operator_declaration (operator) (precedence_clause))
	(operator_declaration (operator) (precedence_clause))
	(operator_declaration (operator) (precedence_clause))
	(operator_declaration (operator) (precedence_clause))
	(operator_declaration (operator) (precedence_clause))
	(operator_declaration (operator) (precedence_clause))
	(operator_declaration (operator) (associativity_clause))
	(operator_declaration (operator) (precedence_clause) (associativity_clause))
	(operator_declaration (operator) (associativity_clause) (precedence_clause)))
